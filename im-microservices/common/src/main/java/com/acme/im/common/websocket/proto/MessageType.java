// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: websocket.proto

// Protobuf Java Version: 3.25.1
package com.acme.im.common.websocket.proto;

/**
 * Protobuf enum {@code com.acme.im.websocket.MessageType}
 */
public enum MessageType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * ================================
   * 聊天消息类型
   * ================================
   * </pre>
   *
   * <code>CHAT_TEXT = 0;</code>
   */
  CHAT_TEXT(0),
  /**
   * <pre>
   * 图片消息
   * </pre>
   *
   * <code>CHAT_IMAGE = 1;</code>
   */
  CHAT_IMAGE(1),
  /**
   * <pre>
   * 文件消息
   * </pre>
   *
   * <code>CHAT_FILE = 2;</code>
   */
  CHAT_FILE(2),
  /**
   * <pre>
   * 语音消息
   * </pre>
   *
   * <code>CHAT_VOICE = 3;</code>
   */
  CHAT_VOICE(3),
  /**
   * <pre>
   * 视频消息
   * </pre>
   *
   * <code>CHAT_VIDEO = 4;</code>
   */
  CHAT_VIDEO(4),
  /**
   * <pre>
   * 位置消息
   * </pre>
   *
   * <code>CHAT_LOCATION = 5;</code>
   */
  CHAT_LOCATION(5),
  /**
   * <pre>
   * 名片消息
   * </pre>
   *
   * <code>CHAT_CARD = 6;</code>
   */
  CHAT_CARD(6),
  /**
   * <pre>
   * 聊天消息特殊类型
   * </pre>
   *
   * <code>CHAT_EDIT = 10;</code>
   */
  CHAT_EDIT(10),
  /**
   * <pre>
   * 引用消息
   * </pre>
   *
   * <code>CHAT_QUOTE = 11;</code>
   */
  CHAT_QUOTE(11),
  /**
   * <pre>
   * 转发消息
   * </pre>
   *
   * <code>CHAT_FORWARD = 12;</code>
   */
  CHAT_FORWARD(12),
  /**
   * <pre>
   * 撤回消息
   * </pre>
   *
   * <code>CHAT_RECALL = 13;</code>
   */
  CHAT_RECALL(13),
  /**
   * <pre>
   * ================================
   * 通知消息类型
   * ================================
   * </pre>
   *
   * <code>NOTIFICATION_ANNOUNCEMENT = 20;</code>
   */
  NOTIFICATION_ANNOUNCEMENT(20),
  /**
   * <pre>
   * 提醒通知
   * </pre>
   *
   * <code>NOTIFICATION_ALERT = 21;</code>
   */
  NOTIFICATION_ALERT(21),
  /**
   * <pre>
   * 推广通知
   * </pre>
   *
   * <code>NOTIFICATION_PROMOTION = 22;</code>
   */
  NOTIFICATION_PROMOTION(22),
  /**
   * <pre>
   * 维护通知
   * </pre>
   *
   * <code>NOTIFICATION_MAINTENANCE = 23;</code>
   */
  NOTIFICATION_MAINTENANCE(23),
  /**
   * <pre>
   * ================================
   * 系统消息类型
   * ================================
   * </pre>
   *
   * <code>SYSTEM_CONNECT = 30;</code>
   */
  SYSTEM_CONNECT(30),
  /**
   * <pre>
   * 断开连接
   * </pre>
   *
   * <code>SYSTEM_DISCONNECT = 31;</code>
   */
  SYSTEM_DISCONNECT(31),
  /**
   * <pre>
   * 心跳消息
   * </pre>
   *
   * <code>SYSTEM_HEARTBEAT = 32;</code>
   */
  SYSTEM_HEARTBEAT(32),
  /**
   * <pre>
   * 认证消息
   * </pre>
   *
   * <code>SYSTEM_AUTH = 33;</code>
   */
  SYSTEM_AUTH(33),
  /**
   * <pre>
   * 状态更新
   * </pre>
   *
   * <code>SYSTEM_STATUS = 34;</code>
   */
  SYSTEM_STATUS(34),
  /**
   * <pre>
   * ================================
   * 事件消息类型（NATS事件通知）
   * ================================
   * </pre>
   *
   * <code>EVENT_USER_STATUS_CHANGE = 40;</code>
   */
  EVENT_USER_STATUS_CHANGE(40),
  /**
   * <pre>
   * 群组更新
   * </pre>
   *
   * <code>EVENT_GROUP_UPDATE = 41;</code>
   */
  EVENT_GROUP_UPDATE(41),
  /**
   * <pre>
   * 消息状态变更
   * </pre>
   *
   * <code>EVENT_MESSAGE_STATUS_CHANGE = 42;</code>
   */
  EVENT_MESSAGE_STATUS_CHANGE(42),
  /**
   * <pre>
   * 系统配置变更
   * </pre>
   *
   * <code>EVENT_SYSTEM_CONFIG_CHANGE = 43;</code>
   */
  EVENT_SYSTEM_CONFIG_CHANGE(43),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * ================================
   * 聊天消息类型
   * ================================
   * </pre>
   *
   * <code>CHAT_TEXT = 0;</code>
   */
  public static final int CHAT_TEXT_VALUE = 0;
  /**
   * <pre>
   * 图片消息
   * </pre>
   *
   * <code>CHAT_IMAGE = 1;</code>
   */
  public static final int CHAT_IMAGE_VALUE = 1;
  /**
   * <pre>
   * 文件消息
   * </pre>
   *
   * <code>CHAT_FILE = 2;</code>
   */
  public static final int CHAT_FILE_VALUE = 2;
  /**
   * <pre>
   * 语音消息
   * </pre>
   *
   * <code>CHAT_VOICE = 3;</code>
   */
  public static final int CHAT_VOICE_VALUE = 3;
  /**
   * <pre>
   * 视频消息
   * </pre>
   *
   * <code>CHAT_VIDEO = 4;</code>
   */
  public static final int CHAT_VIDEO_VALUE = 4;
  /**
   * <pre>
   * 位置消息
   * </pre>
   *
   * <code>CHAT_LOCATION = 5;</code>
   */
  public static final int CHAT_LOCATION_VALUE = 5;
  /**
   * <pre>
   * 名片消息
   * </pre>
   *
   * <code>CHAT_CARD = 6;</code>
   */
  public static final int CHAT_CARD_VALUE = 6;
  /**
   * <pre>
   * 聊天消息特殊类型
   * </pre>
   *
   * <code>CHAT_EDIT = 10;</code>
   */
  public static final int CHAT_EDIT_VALUE = 10;
  /**
   * <pre>
   * 引用消息
   * </pre>
   *
   * <code>CHAT_QUOTE = 11;</code>
   */
  public static final int CHAT_QUOTE_VALUE = 11;
  /**
   * <pre>
   * 转发消息
   * </pre>
   *
   * <code>CHAT_FORWARD = 12;</code>
   */
  public static final int CHAT_FORWARD_VALUE = 12;
  /**
   * <pre>
   * 撤回消息
   * </pre>
   *
   * <code>CHAT_RECALL = 13;</code>
   */
  public static final int CHAT_RECALL_VALUE = 13;
  /**
   * <pre>
   * ================================
   * 通知消息类型
   * ================================
   * </pre>
   *
   * <code>NOTIFICATION_ANNOUNCEMENT = 20;</code>
   */
  public static final int NOTIFICATION_ANNOUNCEMENT_VALUE = 20;
  /**
   * <pre>
   * 提醒通知
   * </pre>
   *
   * <code>NOTIFICATION_ALERT = 21;</code>
   */
  public static final int NOTIFICATION_ALERT_VALUE = 21;
  /**
   * <pre>
   * 推广通知
   * </pre>
   *
   * <code>NOTIFICATION_PROMOTION = 22;</code>
   */
  public static final int NOTIFICATION_PROMOTION_VALUE = 22;
  /**
   * <pre>
   * 维护通知
   * </pre>
   *
   * <code>NOTIFICATION_MAINTENANCE = 23;</code>
   */
  public static final int NOTIFICATION_MAINTENANCE_VALUE = 23;
  /**
   * <pre>
   * ================================
   * 系统消息类型
   * ================================
   * </pre>
   *
   * <code>SYSTEM_CONNECT = 30;</code>
   */
  public static final int SYSTEM_CONNECT_VALUE = 30;
  /**
   * <pre>
   * 断开连接
   * </pre>
   *
   * <code>SYSTEM_DISCONNECT = 31;</code>
   */
  public static final int SYSTEM_DISCONNECT_VALUE = 31;
  /**
   * <pre>
   * 心跳消息
   * </pre>
   *
   * <code>SYSTEM_HEARTBEAT = 32;</code>
   */
  public static final int SYSTEM_HEARTBEAT_VALUE = 32;
  /**
   * <pre>
   * 认证消息
   * </pre>
   *
   * <code>SYSTEM_AUTH = 33;</code>
   */
  public static final int SYSTEM_AUTH_VALUE = 33;
  /**
   * <pre>
   * 状态更新
   * </pre>
   *
   * <code>SYSTEM_STATUS = 34;</code>
   */
  public static final int SYSTEM_STATUS_VALUE = 34;
  /**
   * <pre>
   * ================================
   * 事件消息类型（NATS事件通知）
   * ================================
   * </pre>
   *
   * <code>EVENT_USER_STATUS_CHANGE = 40;</code>
   */
  public static final int EVENT_USER_STATUS_CHANGE_VALUE = 40;
  /**
   * <pre>
   * 群组更新
   * </pre>
   *
   * <code>EVENT_GROUP_UPDATE = 41;</code>
   */
  public static final int EVENT_GROUP_UPDATE_VALUE = 41;
  /**
   * <pre>
   * 消息状态变更
   * </pre>
   *
   * <code>EVENT_MESSAGE_STATUS_CHANGE = 42;</code>
   */
  public static final int EVENT_MESSAGE_STATUS_CHANGE_VALUE = 42;
  /**
   * <pre>
   * 系统配置变更
   * </pre>
   *
   * <code>EVENT_SYSTEM_CONFIG_CHANGE = 43;</code>
   */
  public static final int EVENT_SYSTEM_CONFIG_CHANGE_VALUE = 43;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static MessageType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static MessageType forNumber(int value) {
    switch (value) {
      case 0: return CHAT_TEXT;
      case 1: return CHAT_IMAGE;
      case 2: return CHAT_FILE;
      case 3: return CHAT_VOICE;
      case 4: return CHAT_VIDEO;
      case 5: return CHAT_LOCATION;
      case 6: return CHAT_CARD;
      case 10: return CHAT_EDIT;
      case 11: return CHAT_QUOTE;
      case 12: return CHAT_FORWARD;
      case 13: return CHAT_RECALL;
      case 20: return NOTIFICATION_ANNOUNCEMENT;
      case 21: return NOTIFICATION_ALERT;
      case 22: return NOTIFICATION_PROMOTION;
      case 23: return NOTIFICATION_MAINTENANCE;
      case 30: return SYSTEM_CONNECT;
      case 31: return SYSTEM_DISCONNECT;
      case 32: return SYSTEM_HEARTBEAT;
      case 33: return SYSTEM_AUTH;
      case 34: return SYSTEM_STATUS;
      case 40: return EVENT_USER_STATUS_CHANGE;
      case 41: return EVENT_GROUP_UPDATE;
      case 42: return EVENT_MESSAGE_STATUS_CHANGE;
      case 43: return EVENT_SYSTEM_CONFIG_CHANGE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<MessageType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      MessageType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<MessageType>() {
          public MessageType findValueByNumber(int number) {
            return MessageType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.acme.im.common.websocket.proto.WebSocketProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final MessageType[] VALUES = values();

  public static MessageType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private MessageType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:com.acme.im.websocket.MessageType)
}

